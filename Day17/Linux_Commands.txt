
Exercise01:-
First child: slept for 1 second.
Second child: slept for 3 seconds.
Parent: Both children have finish.

Code:-

		#include <stdio.h>
		#include <stdlib.h> // for exit()
		#include <unistd.h>  // for fork(), sleep()
		#include <sys/wait.h> // for wait()

		int main() {
			pid_t pid1, pid2;

			printf("Parent process started. PID: %d\n", getpid());

			pid1 = fork(); 
			if (pid1 < 0) {
				perror("Fork for first child failed!");
				exit(1);
			}

			if (pid1 == 0) {
				printf("First child. PID: %d, sleeping for 1 second..\n", getpid());
				sleep(1); 
				printf("First child process exiting.\n");
				exit(0); 
			} else {
				pid2 = fork(); 
				if (pid2 < 0) {
					perror("Fork for second child failed!");
					exit(1);
				}

				if (pid2 == 0) {
					printf("Second child. PID: %d, sleeping for 3 seconds..\n", getpid());
					sleep(3); 
					printf("Second child process exiting.\n");
					exit(0); 
				} else {
					int status1, status2;
					printf("Parent waiting for both children to finish..\n");

					waitpid(pid1, &status1, 0);
					if (WIFEXITED(status1)) {
						printf("First child exited with status: %d\n", WEXITSTATUS(status1));
					} else {
						printf("First child did not exit normally.\n");
					}

					waitpid(pid2, &status2, 0);
					if (WIFEXITED(status2)) {
						printf("Second child exited with status: %d\n", WEXITSTATUS(status2));
					} else {
						printf("Second child did not exit normally.\n");
					}

					printf("Parent: Both children have finished.\n");
				}
			}

			return 0;
		}
		
Output:-

		[root@DESKTOP-OQN03LD ~]# touch Exercise1.c
		[root@DESKTOP-OQN03LD ~]# vi Exercise1.c
		[root@DESKTOP-OQN03LD ~]# gcc Exercise1.c -o Exercise1
		[root@DESKTOP-OQN03LD ~]# ./Exercise1
		Parent process started. PID: 49
		First child. PID: 50, sleeping for 1 second..
		Parent waiting for both children to finish..
		Second child. PID: 51, sleeping for 3 seconds..
		First child process exiting.
		First child exited with status: 0
		Second child process exiting.
		Second child exited with status: 0
		Parent: Both children have finished.

Exercise02:-
First child: sleeps for 2 seconds. Exit with status 2.
Second child: sleeps for 1 second. Exit with status 1.
Parent: Wait twice and prints which child(by PID or exit code) finished first and second

Code:-

		#include <stdio.h>
		#include <stdlib.h> // for exit()
		#include <unistd.h>  // for fork(), sleep()
		#include <sys/wait.h> // for wait()

		int main() {
			pid_t pid1, pid2;

			printf("Parent process started. PID: %d\n", getpid());

			pid1 = fork(); 
			if (pid1 < 0) {
				perror("First child failed!");
				exit(1);
			}

			if (pid1 == 0) {
				printf("First child. PID: %d, sleeping for 2 seconds..\n", getpid());
				sleep(2); 
				printf("First child process exiting with status 2.\n");
				exit(2); 
			} else {
				pid2 = fork(); 
				if (pid2 < 0) {
					perror("Second child failed!");
					exit(1);
				}

				if (pid2 == 0) {
					printf("Second child. PID: %d, sleeping for 1 second..\n", getpid());
					sleep(1); 
					printf("Second child process exiting with status 1.\n");
					exit(1); 
				} else {
					int status1, status2;
					printf("Parent waiting for both children to finish..\n");

					waitpid(pid1, &status1, 0);
					if (WIFEXITED(status1)) {
						printf("First child (PID: %d) exited with status: %d\n", pid1, WEXITSTATUS(status1));
					} else {
						printf("First child did not exit normally.\n");
					}

					waitpid(pid2, &status2, 0);
					if (WIFEXITED(status2)) {
						printf("Second child (PID: %d) exited with status: %d\n", pid2, WEXITSTATUS(status2));
					} else {
						printf("Second child did not exit normally.\n");
					}

					if (WEXITSTATUS(status1) == 2 && WEXITSTATUS(status2) == 1) {
						printf("Parent: Second child finished first (PID: %d).\n", pid2);
						printf("Parent: First child finished second (PID: %d).\n", pid1);
					} else if (WEXITSTATUS(status1) == 1 && WEXITSTATUS(status2) == 2) {
						printf("Parent: First child finished first (PID: %d).\n", pid1);
						printf("Parent: Second child finished second (PID: %d).\n", pid2);
					}
					printf("Parent: Both children have finished.\n");
				}
			}

			return 0;
		}

Output:-

		[root@DESKTOP-OQN03LD ~]# touch Exercise2.c
		[root@DESKTOP-OQN03LD ~]# vi Exercise2.c
		[root@DESKTOP-OQN03LD ~]# gcc Exercise2.c -o Exercise2
		[root@DESKTOP-OQN03LD ~]# ./Exercise2
		Parent process started. PID: 59
		First child. PID: 60, sleeping for 2 seconds..
		Parent waiting for both children to finish..
		Second child. PID: 61, sleeping for 1 second..
		Second child process exiting with status 1.
		First child process exiting with status 2.
		First child (PID: 60) exited with status: 2
		Second child (PID: 61) exited with status: 1
		Parent: Second child finished first (PID: 61).
		Parent: First child finished second (PID: 60).
		Parent: Both children have finished.
				

Exercise03:-
The parent creates a child process.
The child creates a grandchild process.
The grandchild sleeps 2 seconds and exits with status 2.
The child waits for the grandchild, prints its exit status, then exits with satatus 55.

Code:-

		#include <stdio.h>
		#include <stdlib.h> // for exit()
		#include <unistd.h>  // for fork(), sleep()
		#include <sys/wait.h> // for wait()

		int main() {
			pid_t pid_child, pid_grandchild;

			printf("Parent process started. PID: %d\n", getpid());

			pid_child = fork(); 
			if (pid_child < 0) {
				perror("Fork for child failed!");
				exit(1);
			}

			if (pid_child == 0) {
				printf("Child process. PID: %d, creating a grandchild.\n", getpid());

				pid_grandchild = fork(); 
				if (pid_grandchild < 0) {
					perror("Fork for grandchild failed!");
					exit(1);
				}

				if (pid_grandchild == 0) {
					printf("Grandchild process. PID: %d, sleeping for 2 seconds..\n", getpid());
					sleep(2); 
					printf("Grandchild process exiting with status 2.\n");
					exit(2); 
				} else {
					int status_grandchild;
					waitpid(pid_grandchild, &status_grandchild, 0);
					if (WIFEXITED(status_grandchild)) {
						printf("Child process: Grandchild exited with status: %d\n", WEXITSTATUS(status_grandchild));
					} else {
						printf("Child process: Grandchild did not exit normally.\n");
					}

					printf("Child process exiting with status 55.\n");
					exit(55);
				}
			} else {
				int status_child;
				waitpid(pid_child, &status_child, 0);
				if (WIFEXITED(status_child)) {
					printf("Parent process: Child exited with status: %d\n", WEXITSTATUS(status_child));
				} else {
					printf("Parent process: Child did not exit normally.\n");
				}

				printf("Parent process ending.\n");
			}

			return 0;
		}

Output:-

		[root@DESKTOP-OQN03LD ~]# touch Exercise3.c
		[root@DESKTOP-OQN03LD ~]# vi Exercise3.c
		[root@DESKTOP-OQN03LD ~]# gcc Exercise3.c -o Exercise3
		[root@DESKTOP-OQN03LD ~]# ./Exercise3
		Parent process started. PID: 69
		Child process. PID: 70, creating a grandchild.
		Grandchild process. PID: 71, sleeping for 2 seconds..
		Grandchild process exiting with status 2.
		Child process: Grandchild exited with status: 2
		Child process exiting with status 55.
		Parent process: Child exited with status: 55
		Parent process ending.